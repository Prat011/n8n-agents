{
  "name": "‚ö° Smart Order Fulfillment Engine - Shopify",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "order-webhook",
        "options": {}
      },
      "id": "shopify-webhook",
      "name": "üõí New Order Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "new-order-webhook",
      "notes": "üî• DEMO: Instant order processing\nüí∞ ROI: Eliminates fulfillment errors\n‚ö° Impact: 10x faster order routing"
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "prompt": "=You are an expert fulfillment optimization AI. Analyze this Shopify order and determine the optimal fulfillment strategy.\n\nOrder Data: {{JSON.stringify($json, null, 2)}}\n\nConsider these factors:\n1. **Product Locations**: Check inventory at each warehouse\n2. **Shipping Speed**: Customer's location and shipping method\n3. **Costs**: Compare fulfillment costs across locations\n4. **Capacity**: Current workload at each facility\n5. **Special Requirements**: Fragile items, size constraints, customs\n\nAvailable Fulfillment Centers:\n- **West Coast DC** (Los Angeles): Fast shipping to CA, NV, AZ\n- **East Coast DC** (Atlanta): Fast shipping to FL, GA, SC, NC\n- **Central DC** (Chicago): Balanced shipping nationwide\n- **3PL Partner** (ShipBob): Overflow capacity, higher cost\n- **Amazon FBA**: For eligible products\n\nReturn a JSON decision with:\n- recommended_facility\n- reasoning\n- estimated_cost\n- shipping_timeline\n- risk_factors\n- backup_options",
        "options": {
          "temperature": 0.2,
          "maxTokens": 1500
        }
      },
      "id": "fulfillment-ai",
      "name": "üß† AI Fulfillment Router",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [460, 300],
      "notes": "üéØ AI analyzes optimal fulfillment path\nüì¶ Considers inventory, cost, speed\nüé≤ Intelligent routing decisions"
    },
    {
      "parameters": {
        "jsCode": "// Parse AI decision and validate inventory availability\nconst orderData = $input.first().json;\nconst aiDecision = JSON.parse($input.last().json.choices[0].message.content);\n\n// Mock inventory check (replace with real inventory API)\nconst inventoryCheck = {\n  'West Coast DC': { available: true, quantity: 50, cost: 4.50 },\n  'East Coast DC': { available: true, quantity: 23, cost: 4.25 },\n  'Central DC': { available: false, quantity: 0, cost: 4.75 },\n  '3PL Partner': { available: true, quantity: 100, cost: 6.50 },\n  'Amazon FBA': { available: true, quantity: 75, cost: 3.25 }\n};\n\n// Validate AI recommendation against actual inventory\nconst recommendedFacility = aiDecision.recommended_facility;\nconst inventory = inventoryCheck[recommendedFacility];\n\nlet finalDecision = aiDecision;\n\n// If recommended facility is out of stock, use backup\nif (!inventory || !inventory.available) {\n  const backupOptions = aiDecision.backup_options || [];\n  for (const backup of backupOptions) {\n    if (inventoryCheck[backup] && inventoryCheck[backup].available) {\n      finalDecision.recommended_facility = backup;\n      finalDecision.reasoning += ` (Switched to ${backup} due to inventory))`;\n      break;\n    }\n  }\n}\n\n// Enrich with actual inventory data\nconst finalInventory = inventoryCheck[finalDecision.recommended_facility];\nfinalDecision.actual_cost = finalInventory.cost;\nfinalDecision.available_quantity = finalInventory.quantity;\n\n// Add order processing metadata\nfinalDecision.order_id = orderData.id || orderData.order_number;\nfinalDecision.customer_email = orderData.email || orderData.customer?.email;\nfinalDecision.shipping_address = orderData.shipping_address;\nfinalDecision.items = orderData.line_items || orderData.items;\nfinalDecision.priority = orderData.tags?.includes('VIP') ? 'HIGH' : 'NORMAL';\nfinalDecision.processing_timestamp = new Date().toISOString();\n\nreturn [{json: finalDecision}];"
      },
      "id": "inventory-validation",
      "name": "üì¶ Validate Inventory",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "notes": "‚úÖ Real-time inventory verification\nüîÑ Automatic backup facility routing\nüìä Cost and availability validation"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "west-coast",
              "leftValue": "={{$json.recommended_facility}}",
              "rightValue": "West Coast DC",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "east-coast",
              "leftValue": "={{$json.recommended_facility}}",
              "rightValue": "East Coast DC",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "central",
              "leftValue": "={{$json.recommended_facility}}",
              "rightValue": "Central DC",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "third-party",
              "leftValue": "={{$json.recommended_facility}}",
              "rightValue": "3PL Partner",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "amazon-fba",
              "leftValue": "={{$json.recommended_facility}}",
              "rightValue": "Amazon FBA",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "any"
        },
        "options": {}
      },
      "id": "facility-router",
      "name": "üè≠ Route to Facility",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 300],
      "notes": "üîÄ Routes orders to correct fulfillment system\n‚ö° Multiple facility integration\nüéØ Optimal path selection"
    },
    {
      "parameters": {
        "url": "https://api.shipstation.com/orders/createorder",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shipStationApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "orderNumber",
              "value": "={{$json.order_id}}"
            },
            {
              "name": "orderDate",
              "value": "={{$json.processing_timestamp}}"
            },
            {
              "name": "orderStatus",
              "value": "awaiting_shipment"
            },
            {
              "name": "customerEmail",
              "value": "={{$json.customer_email}}"
            },
            {
              "name": "shipTo",
              "value": "={{JSON.stringify($json.shipping_address)}}"
            },
            {
              "name": "items",
              "value": "={{JSON.stringify($json.items)}}"
            },
            {
              "name": "tagIds",
              "value": "=[1001]"
            }
          ]
        },
        "options": {}
      },
      "id": "shipstation-order",
      "name": "üì¶ ShipStation (West Coast)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 180],
      "notes": "üì¶ West Coast fulfillment\nüöÄ Fast shipping to Western US\nüí∞ Lower shipping costs"
    },
    {
      "parameters": {
        "url": "https://api.fulfillmentbyamazon.com/orders",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "amazonFbaApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "SellerOrderId",
              "value": "={{$json.order_id}}"
            },
            {
              "name": "DisplayableOrderDate",
              "value": "={{$json.processing_timestamp}}"
            },
            {
              "name": "DisplayableOrderComment",
              "value": "Auto-routed via AI optimization"
            },
            {
              "name": "ShippingSpeedCategory",
              "value": "Standard"
            },
            {
              "name": "DestinationAddress",
              "value": "={{JSON.stringify($json.shipping_address)}}"
            },
            {
              "name": "Items",
              "value": "={{JSON.stringify($json.items)}}"
            }
          ]
        },
        "options": {}
      },
      "id": "amazon-fba-order",
      "name": "üì¶ Amazon FBA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 420],
      "notes": "üì¶ Amazon FBA fulfillment\nüí∏ Lowest cost option\nüéØ Prime shipping eligible"
    },
    {
      "parameters": {
        "resource": "order",
        "operation": "update",
        "orderId": "={{$json.order_id}}",
        "updateFields": {
          "fulfillmentStatus": "fulfilled",
          "note": "={{$json.reasoning}}",
          "tags": "AI-Optimized,{{$json.recommended_facility}},{{$json.priority}}"
        }
      },
      "id": "shopify-update",
      "name": "üõí Update Shopify Order",
      "type": "n8n-nodes-base.shopify",
      "typeVersion": 1,
      "position": [1340, 300],
      "notes": "‚úÖ Mark order as processed\nüìù Add fulfillment notes\nüè∑Ô∏è Tag with AI decisions"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "fulfillment_analytics",
        "columns": "order_id, facility, reasoning, cost, timeline, created_at",
        "additionalFields": {
          "values": "'{{$json.order_id}}', '{{$json.recommended_facility}}', '{{$json.reasoning}}', {{$json.actual_cost}}, '{{$json.shipping_timeline}}', NOW()"
        }
      },
      "id": "analytics-log",
      "name": "üìä Log Fulfillment Decision",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 300],
      "notes": "üìà Track fulfillment performance\nüí∞ Cost analysis and optimization\nüîç Decision audit trail"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C1234567891",
          "mode": "list",
          "cachedResultName": "fulfillment-alerts"
        },
        "text": "=üì¶ **Smart Fulfillment Complete!**\n\n**Order:** {{$json.order_id}}\n**Facility:** {{$json.recommended_facility}}\n**Cost:** ${{$json.actual_cost}}\n**Timeline:** {{$json.shipping_timeline}}\n\n**AI Reasoning:**\n{{$json.reasoning}}\n\n{{$json.priority === 'HIGH' ? 'üî• **VIP Customer Priority**' : ''}}\n\n_Fulfillment optimized automatically_ ‚ö°",
        "otherOptions": {}
      },
      "id": "team-notification",
      "name": "üì± Team Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1780, 300],
      "notes": "üîî Real-time fulfillment updates\nüë• Team coordination\nüìà Performance insights"
    }
  ],
  "connections": {
    "üõí New Order Webhook": {
      "main": [
        [
          {
            "node": "üß† AI Fulfillment Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† AI Fulfillment Router": {
      "main": [
        [
          {
            "node": "üì¶ Validate Inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì¶ Validate Inventory": {
      "main": [
        [
          {
            "node": "üè≠ Route to Facility",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üè≠ Route to Facility": {
      "main": [
        [
          {
            "node": "üì¶ ShipStation (West Coast)",
            "type": "main",
            "index": 0
          },
          {
            "node": "üõí Update Shopify Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üì¶ ShipStation (West Coast)",
            "type": "main",
            "index": 0
          },
          {
            "node": "üõí Update Shopify Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üì¶ ShipStation (West Coast)",
            "type": "main",
            "index": 0
          },
          {
            "node": "üõí Update Shopify Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üì¶ ShipStation (West Coast)",
            "type": "main",
            "index": 0
          },
          {
            "node": "üõí Update Shopify Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üì¶ Amazon FBA",
            "type": "main",
            "index": 0
          },
          {
            "node": "üõí Update Shopify Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üõí Update Shopify Order": {
      "main": [
        [
          {
            "node": "üìä Log Fulfillment Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Log Fulfillment Decision": {
      "main": [
        [
          {
            "node": "üì± Team Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-30T10:00:00.000Z",
      "updatedAt": "2024-12-30T10:00:00.000Z",
      "id": "shopify-fulfillment",
      "name": "Shopify Fulfillment"
    },
    {
      "createdAt": "2024-12-30T10:00:00.000Z",
      "updatedAt": "2024-12-30T10:00:00.000Z",
      "id": "instant-roi",
      "name": "Instant ROI"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-12-30T10:00:00.000Z",
  "versionId": "1.0.0"
}