{
  "name": "üìà Demand Forecasting & Trend Predictor - Multi-Platform",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "id": "forecast-trigger",
      "name": "Every 6 Hours Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "üî• DEMO: Forecasts demand every 6 hours\nüí∞ ROI: 30-90 day competitive advantage\n‚ö° Impact: Predict demand spikes before competitors"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  product_id, \n  product_name, \n  category,\n  DATE(created_at) as date,\n  SUM(quantity) as units_sold,\n  SUM(total_amount) as revenue,\n  AVG(unit_price) as avg_price\nFROM sales_history \nWHERE created_at >= NOW() - INTERVAL '90 days'\nGROUP BY product_id, product_name, category, DATE(created_at)\nORDER BY product_id, date",
        "additionalFields": {}
      },
      "id": "sales-history",
      "name": "üìä Get Sales History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 240],
      "notes": "Retrieves 90-day sales history\nProducts, categories, seasonal patterns"
    },
    {
      "parameters": {
        "url": "https://trends.googleapis.com/trends/api/dailytrends",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "hl",
                "value": "en-US"
              },
              {
                "name": "tz",
                "value": "-360"
              },
              {
                "name": "geo",
                "value": "US"
              }
            ]
          }
        }
      },
      "id": "google-trends",
      "name": "üîç Google Trends Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300],
      "notes": "Real-time search trends\nEmerging keywords and topics"
    },
    {
      "parameters": {
        "url": "https://api.twitter.com/2/tweets/search/recent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "twitterOAuth2Api",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "query",
                "value": "(product OR shopping OR buy) lang:en -is:retweet"
              },
              {
                "name": "max_results",
                "value": "100"
              },
              {
                "name": "tweet.fields",
                "value": "created_at,public_metrics,context_annotations"
              }
            ]
          }
        }
      },
      "id": "social-mentions",
      "name": "üê¶ Social Media Trends",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 360],
      "notes": "Social media sentiment tracking\nViral product mentions and trends"
    },
    {
      "parameters": {
        "url": "https://api.openweathermap.org/data/2.5/forecast",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "q",
                "value": "New York,US"
              },
              {
                "name": "appid",
                "value": "={{$credentials.openWeather.apiKey}}"
              },
              {
                "name": "units",
                "value": "imperial"
              }
            ]
          }
        }
      },
      "id": "weather-data",
      "name": "üå§Ô∏è Weather Forecast",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 420],
      "notes": "Weather impact on seasonal products\n5-day forecast for demand correlation"
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "prompt": "=You are an expert demand forecasting analyst. Analyze multiple data sources to predict product demand for the next 30-90 days.\n\nSales History: {{$node[\"sales-history\"].json}}\nGoogle Trends: {{$node[\"google-trends\"].json}}\nSocial Media: {{$node[\"social-mentions\"].json}}\nWeather Forecast: {{$node[\"weather-data\"].json}}\n\nAnalyze:\n1. Historical sales patterns and seasonality\n2. Trending keywords related to our product categories\n3. Social sentiment and viral product mentions\n4. Weather impact on relevant products\n5. External events (holidays, sports, economic)\n\nFor each product category, provide:\n- 30-day demand forecast (units and revenue)\n- 90-day trend prediction\n- Key demand drivers and risks\n- Recommended inventory levels\n- New opportunity products\n- Confidence intervals (high/medium/low)\n\nReturn JSON with detailed forecasts, reasoning, and actionable recommendations.",
        "options": {
          "temperature": 0.2,
          "maxTokens": 3000
        }
      },
      "id": "demand-analysis",
      "name": "üß† AI Demand Analysis",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [680, 340],
      "notes": "üéØ Multi-source demand prediction\nüìä Combines historical + external signals\nüé≤ Confidence-based forecasting"
    },
    {
      "parameters": {
        "jsCode": "// Advanced time series forecasting with ARIMA-like calculations\nconst analysis = JSON.parse($input.first().json.choices[0].message.content);\nconst salesHistory = $node[\"sales-history\"].json;\nconst trendsData = $node[\"google-trends\"].json;\n\n// Time series analysis functions\nfunction calculateMovingAverage(data, window) {\n  const result = [];\n  for (let i = window - 1; i < data.length; i++) {\n    const sum = data.slice(i - window + 1, i + 1).reduce((a, b) => a + b, 0);\n    result.push(sum / window);\n  }\n  return result;\n}\n\nfunction calculateSeasonality(data) {\n  const dayOfWeek = {};\n  const monthOfYear = {};\n  \n  data.forEach(item => {\n    const date = new Date(item.date);\n    const dow = date.getDay();\n    const month = date.getMonth();\n    \n    if (!dayOfWeek[dow]) dayOfWeek[dow] = [];\n    if (!monthOfYear[month]) monthOfYear[month] = [];\n    \n    dayOfWeek[dow].push(item.units_sold);\n    monthOfYear[month].push(item.units_sold);\n  });\n  \n  // Calculate seasonal multipliers\n  const weeklyPattern = Object.keys(dayOfWeek).reduce((acc, day) => {\n    acc[day] = dayOfWeek[day].reduce((sum, val) => sum + val, 0) / dayOfWeek[day].length;\n    return acc;\n  }, {});\n  \n  return { weeklyPattern, monthOfYear };\n}\n\nfunction forecastARIMA(data, periods) {\n  // Simplified ARIMA-like forecast\n  const recent = data.slice(-14); // Last 14 days\n  const trend = (recent[recent.length - 1] - recent[0]) / recent.length;\n  const baseline = recent.reduce((sum, val) => sum + val, 0) / recent.length;\n  \n  const forecast = [];\n  for (let i = 1; i <= periods; i++) {\n    const trendComponent = baseline + (trend * i);\n    const seasonalMultiplier = 1 + (Math.sin(i * Math.PI / 7) * 0.1); // Weekly seasonality\n    const randomWalk = Math.random() * 0.1 - 0.05; // Small random component\n    \n    forecast.push(Math.max(0, trendComponent * seasonalMultiplier * (1 + randomWalk)));\n  }\n  \n  return forecast;\n}\n\n// Process each product category\nconst productCategories = {};\nsalesHistory.forEach(item => {\n  if (!productCategories[item.category]) {\n    productCategories[item.category] = [];\n  }\n  productCategories[item.category].push({\n    date: item.date,\n    units_sold: item.units_sold,\n    revenue: item.revenue\n  });\n});\n\nconst enhancedForecasts = [];\n\nObject.keys(productCategories).forEach(category => {\n  const categoryData = productCategories[category].sort((a, b) => new Date(a.date) - new Date(b.date));\n  const unitsSold = categoryData.map(d => d.units_sold);\n  \n  // Calculate technical indicators\n  const ma7 = calculateMovingAverage(unitsSold, 7);\n  const ma30 = calculateMovingAverage(unitsSold, 30);\n  const seasonality = calculateSeasonality(categoryData);\n  \n  // Generate forecasts\n  const forecast30 = forecastARIMA(unitsSold, 30);\n  const forecast90 = forecastARIMA(unitsSold, 90);\n  \n  // Calculate confidence intervals\n  const recentVolatility = ma7.slice(-7).reduce((sum, val, i) => {\n    return sum + Math.abs(val - unitsSold[unitsSold.length - 7 + i]);\n  }, 0) / 7;\n  \n  const confidence = recentVolatility < 10 ? 'high' : recentVolatility < 25 ? 'medium' : 'low';\n  \n  // Incorporate external signals\n  const trendMultiplier = trendsData?.default?.trendingSearchesDays?.[0]?.trendingSearches?.some(t => \n    t.title.query.toLowerCase().includes(category.toLowerCase())) ? 1.2 : 1.0;\n  \n  enhancedForecasts.push({\n    category: category,\n    forecast_30_days: {\n      units: forecast30.reduce((sum, val) => sum + val * trendMultiplier, 0).toFixed(0),\n      revenue: (forecast30.reduce((sum, val) => sum + val * trendMultiplier, 0) * \n               (categoryData.reduce((sum, d) => sum + d.revenue, 0) / categoryData.reduce((sum, d) => sum + d.units_sold, 0))).toFixed(2)\n    },\n    forecast_90_days: {\n      units: forecast90.reduce((sum, val) => sum + val * trendMultiplier, 0).toFixed(0),\n      revenue: (forecast90.reduce((sum, val) => sum + val * trendMultiplier, 0) * \n               (categoryData.reduce((sum, d) => sum + d.revenue, 0) / categoryData.reduce((sum, d) => sum + d.units_sold, 0))).toFixed(2)\n    },\n    confidence: confidence,\n    trend_direction: ma7[ma7.length - 1] > ma30[ma30.length - 1] ? 'up' : 'down',\n    seasonal_multiplier: trendMultiplier,\n    volatility: recentVolatility.toFixed(2),\n    recommendations: analysis.forecasts?.find(f => f.category === category)?.recommendations || [],\n    risk_factors: analysis.forecasts?.find(f => f.category === category)?.risks || [],\n    updated_at: new Date().toISOString()\n  });\n});\n\nreturn enhancedForecasts.map(forecast => ({json: forecast}));"
      },
      "id": "time-series-forecast",
      "name": "üìä ARIMA Forecasting",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 340],
      "notes": "üõ°Ô∏è Advanced time series analysis:\n‚Ä¢ Moving averages and trends\n‚Ä¢ Seasonal pattern detection\n‚Ä¢ Confidence intervals"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "demand_forecasts",
        "columns": "category, forecast_30_units, forecast_30_revenue, forecast_90_units, forecast_90_revenue, confidence, trend_direction, seasonal_multiplier, volatility, recommendations, risk_factors, created_at",
        "additionalFields": {
          "values": "='{{$json.category}}', {{$json.forecast_30_days.units}}, {{$json.forecast_30_days.revenue}}, {{$json.forecast_90_days.units}}, {{$json.forecast_90_days.revenue}}, '{{$json.confidence}}', '{{$json.trend_direction}}', {{$json.seasonal_multiplier}}, {{$json.volatility}}, '{{JSON.stringify($json.recommendations)}}', '{{JSON.stringify($json.risk_factors)}}', '{{$json.updated_at}}'"
        }
      },
      "id": "forecast-database",
      "name": "üìä Store Forecasts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 340],
      "notes": "üìà Historical forecast tracking\nüìä Accuracy measurement\nüîç Business intelligence"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "high-growth-opportunity",
              "leftValue": "={{$json.trend_direction}}",
              "rightValue": "up",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "high-confidence",
              "leftValue": "={{$json.confidence}}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "all"
        },
        "options": {}
      },
      "id": "opportunity-filter",
      "name": "üöÄ High-Growth Opportunity?",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [1340, 340],
      "notes": "Identifies high-confidence growth opportunities for immediate action"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C1234567890",
          "mode": "list",
          "cachedResultName": "forecasting-alerts"
        },
        "text": "=üìà **Demand Forecast Update**\n\n**Category:** {{$json.category}}\n**Trend:** {{$json.trend_direction === 'up' ? 'üìà Growing' : 'üìâ Declining'}}\n**Confidence:** {{$json.confidence.toUpperCase()}}\n\n**30-Day Forecast:**\n‚Ä¢ Units: {{$json.forecast_30_days.units}}\n‚Ä¢ Revenue: ${{$json.forecast_30_days.revenue}}\n\n**90-Day Forecast:**\n‚Ä¢ Units: {{$json.forecast_90_days.units}}\n‚Ä¢ Revenue: ${{$json.forecast_90_days.revenue}}\n\n**Key Recommendations:**\n{{$json.recommendations.slice(0,3).map(rec => `‚Ä¢ ${rec}`).join('\\n')}}\n\n**Risk Factors:**\n{{$json.risk_factors.slice(0,2).map(risk => `‚ö†Ô∏è ${risk}`).join('\\n')}}\n\n_Seasonal Multiplier: {{$json.seasonal_multiplier}}x_",
        "otherOptions": {}
      },
      "id": "slack-forecast-alert",
      "name": "üì± Forecast Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1560, 340],
      "notes": "üîî Growth opportunity alerts\nüìà Forecast summaries\nüë• Strategic planning alerts"
    }
  ],
  "connections": {
    "Every 6 Hours Trigger": {
      "main": [
        [
          {
            "node": "üìä Get Sales History",
            "type": "main",
            "index": 0
          },
          {
            "node": "üîç Google Trends Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "üê¶ Social Media Trends",
            "type": "main",
            "index": 0
          },
          {
            "node": "üå§Ô∏è Weather Forecast",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Get Sales History": {
      "main": [
        [
          {
            "node": "üß† AI Demand Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Google Trends Data": {
      "main": [
        [
          {
            "node": "üß† AI Demand Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üê¶ Social Media Trends": {
      "main": [
        [
          {
            "node": "üß† AI Demand Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üå§Ô∏è Weather Forecast": {
      "main": [
        [
          {
            "node": "üß† AI Demand Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† AI Demand Analysis": {
      "main": [
        [
          {
            "node": "üìä ARIMA Forecasting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä ARIMA Forecasting": {
      "main": [
        [
          {
            "node": "üìä Store Forecasts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Store Forecasts": {
      "main": [
        [
          {
            "node": "üöÄ High-Growth Opportunity?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üöÄ High-Growth Opportunity?": {
      "main": [
        [
          {
            "node": "üì± Forecast Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-30T10:00:00.000Z",
      "updatedAt": "2024-12-30T10:00:00.000Z",
      "id": "competitive-intelligence",
      "name": "Competitive Intelligence"
    },
    {
      "createdAt": "2024-12-30T10:00:00.000Z",
      "updatedAt": "2024-12-30T10:00:00.000Z",
      "id": "forecasting",
      "name": "Forecasting"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-12-30T10:00:00.000Z",
  "versionId": "1.0.0"
}